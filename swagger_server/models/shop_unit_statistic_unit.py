# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.shop_unit_type import ShopUnitType  # noqa: F401,E501
from swagger_server import util


class ShopUnitStatisticUnit(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, name: str=None, parent_id: str=None, type: ShopUnitType=None, price: int=None, date: str=None):  # noqa: E501
        """ShopUnitStatisticUnit - a model defined in Swagger

        :param id: The id of this ShopUnitStatisticUnit.  # noqa: E501
        :type id: str
        :param name: The name of this ShopUnitStatisticUnit.  # noqa: E501
        :type name: str
        :param parent_id: The parent_id of this ShopUnitStatisticUnit.  # noqa: E501
        :type parent_id: str
        :param type: The type of this ShopUnitStatisticUnit.  # noqa: E501
        :type type: ShopUnitType
        :param price: The price of this ShopUnitStatisticUnit.  # noqa: E501
        :type price: int
        :param _date: The _date of this ShopUnitStatisticUnit.  # noqa: E501
        :type _date: str
        """
        self.swagger_types = {
            'id': str,
            'name': str,
            'parent_id': str,
            'type': ShopUnitType,
            'price': int,
            'date': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'parent_id': 'parentId',
            'type': 'type',
            'price': 'price',
            'date': 'date'
        }
        self._id = id
        self._name = name
        self._parent_id = parent_id
        self._type = type
        self._price = price
        self._date = date

    @classmethod
    def from_dict(cls, dikt) -> 'ShopUnitStatisticUnit':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ShopUnitStatisticUnit of this ShopUnitStatisticUnit.  # noqa: E501
        :rtype: ShopUnitStatisticUnit
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this ShopUnitStatisticUnit.

        Уникальный идентфикатор  # noqa: E501

        :return: The id of this ShopUnitStatisticUnit.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this ShopUnitStatisticUnit.

        Уникальный идентфикатор  # noqa: E501

        :param id: The id of this ShopUnitStatisticUnit.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this ShopUnitStatisticUnit.

        Имя элемента  # noqa: E501

        :return: The name of this ShopUnitStatisticUnit.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this ShopUnitStatisticUnit.

        Имя элемента  # noqa: E501

        :param name: The name of this ShopUnitStatisticUnit.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def parent_id(self) -> str:
        """Gets the parent_id of this ShopUnitStatisticUnit.

        UUID родительской категории  # noqa: E501

        :return: The parent_id of this ShopUnitStatisticUnit.
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id: str):
        """Sets the parent_id of this ShopUnitStatisticUnit.

        UUID родительской категории  # noqa: E501

        :param parent_id: The parent_id of this ShopUnitStatisticUnit.
        :type parent_id: str
        """

        self._parent_id = parent_id

    @property
    def type(self) -> ShopUnitType:
        """Gets the type of this ShopUnitStatisticUnit.


        :return: The type of this ShopUnitStatisticUnit.
        :rtype: ShopUnitType
        """
        return self._type

    @type.setter
    def type(self, type: ShopUnitType):
        """Sets the type of this ShopUnitStatisticUnit.


        :param type: The type of this ShopUnitStatisticUnit.
        :type type: ShopUnitType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def price(self) -> int:
        """Gets the price of this ShopUnitStatisticUnit.

        Целое число, для категории - это средняя цена всех дочерних товаров(включая товары подкатегорий). Если цена является не целым числом, округляется в меньшую сторону до целого числа. Если категория не содержит товаров цена равна null.  # noqa: E501

        :return: The price of this ShopUnitStatisticUnit.
        :rtype: int
        """
        return self._price

    @price.setter
    def price(self, price: int):
        """Sets the price of this ShopUnitStatisticUnit.

        Целое число, для категории - это средняя цена всех дочерних товаров(включая товары подкатегорий). Если цена является не целым числом, округляется в меньшую сторону до целого числа. Если категория не содержит товаров цена равна null.  # noqa: E501

        :param price: The price of this ShopUnitStatisticUnit.
        :type price: int
        """

        self._price = price

    @property
    def date(self) -> str:
        """Gets the date of this ShopUnitStatisticUnit.

        Время последнего обновления элемента.  # noqa: E501

        :return: The date of this ShopUnitStatisticUnit.
        :rtype: str
        """
        return self._date

    @date.setter
    def date(self, date: str):
        """Sets the _date of this ShopUnitStatisticUnit.

        Время последнего обновления элемента.  # noqa: E501

        :param date: The _date of this ShopUnitStatisticUnit.
        :type date: str
        """
        if date is None:
            raise ValueError("Invalid value for `date`, must not be `None`")  # noqa: E501

        self._date = date
